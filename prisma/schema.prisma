// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEON_DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  tickets       Ticket[]  @relation("CreatedTickets")
  operations    Operation[]
  comments      Comment[]
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  color     String   @default("#3B82F6")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tickets   Ticket[]
}

model Priority {
  id        String   @id @default(cuid())
  name      String   @unique
  color     String   @default("#F59E0B")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tickets   Ticket[]
}

model Status {
  id        String   @id @default(cuid())
  name      String   @unique
  color     String   @default("#6B7280")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tickets   Ticket[]
}

model Ticket {
  id          String     @id @default(cuid())
  subject     String
  description String
  category    Category   @relation(fields: [categoryId], references: [id])
  categoryId  String
  status      Status     @relation(fields: [statusId], references: [id])
  statusId    String
  priority    Priority   @relation(fields: [priorityId], references: [id])
  priorityId  String
  createdBy   User       @relation("CreatedTickets", fields: [createdById], references: [id])
  createdById String
  completedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  operations  Operation[]
  comments    Comment[]
}

model Operation {
  id          String   @id @default(cuid())
  description String
  ticket      Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId    String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
